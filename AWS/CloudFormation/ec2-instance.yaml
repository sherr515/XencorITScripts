AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 Instance with Security Group and IAM Role'

Parameters:
  InstanceType:
    Type: String
    Default: 't3.micro'
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - m5.large
      - m5.xlarge
    Description: EC2 instance type
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the instance will be launched
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID where the instance will be launched
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: Environment name
  InstanceName:
    Type: String
    Default: 'web-server'
    Description: Name for the EC2 instance

Resources:
  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-${InstanceName}-sg'
      GroupDescription: Security group for EC2 instance
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${InstanceName}-sg'
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-${InstanceName}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${Environment}-${InstanceName}-bucket'
                  - !Sub 'arn:aws:s3:::${Environment}-${InstanceName}-bucket/*'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${InstanceName}-role'
        - Key: Environment
          Value: !Ref Environment

  # Instance Profile
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${Environment}-${InstanceName}-profile'
      Roles:
        - !Ref EC2Role

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI (us-east-1)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello from ${InstanceName} in ${Environment} environment!</h1>" > /var/www/html/index.html
          # Install CloudWatch agent
          yum install -y amazon-cloudwatch-agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard
          systemctl start amazon-cloudwatch-agent
          systemctl enable amazon-cloudwatch-agent
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${InstanceName}'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Web Server'

  # CloudWatch Alarm for CPU
  CPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-${InstanceName}-cpu-alarm'
      AlarmDescription: CPU utilization alarm
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2Instance
      AlarmActions:
        - !Ref SNSTopic

  # SNS Topic for Alarms
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${Environment}-${InstanceName}-alarms'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${InstanceName}-alarms'
        - Key: Environment
          Value: !Ref Environment

Outputs:
  InstanceId:
    Description: Instance ID of the newly created EC2 instance
    Value: !Ref EC2Instance
    Export:
      Name: !Sub '${Environment}-${InstanceName}-instance-id'

  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: !Sub '${Environment}-${InstanceName}-public-ip'

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub '${Environment}-${InstanceName}-sg-id'

  IAMRoleArn:
    Description: IAM Role ARN
    Value: !GetAtt EC2Role.Arn
    Export:
      Name: !Sub '${Environment}-${InstanceName}-role-arn' 