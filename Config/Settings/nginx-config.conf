# =============================================================================
# Nginx Server Configuration
# =============================================================================
# Purpose: Secure and optimized Nginx web server configuration
# Author: System Administrator
# Version: 1.0.0
# Date: $(date +%Y-%m-%d)
# =============================================================================

# Nginx Main Configuration File
# This configuration implements security best practices and performance optimization
# Copy this file to /etc/nginx/nginx.conf and restart nginx service

# =============================================================================
# MAIN CONTEXT
# =============================================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# =============================================================================
# EVENTS CONTEXT
# =============================================================================

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
    accept_mutex on;
}

# =============================================================================
# HTTP CONTEXT
# =============================================================================

http {
    # =============================================================================
    # BASIC SETTINGS
    # =============================================================================
    
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # =============================================================================
    # PERFORMANCE SETTINGS
    # =============================================================================
    
    # Sendfile optimization
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # =============================================================================
    # SECURITY SETTINGS
    # =============================================================================
    
    # Hide nginx version
    server_tokens off;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # =============================================================================
    # RATE LIMITING
    # =============================================================================
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;
    
    # =============================================================================
    # UPSTREAM SERVERS
    # =============================================================================
    
    # Application servers
    upstream app_servers {
        least_conn;
        server 127.0.0.1:8001;
        server 127.0.0.1:8002;
        server 127.0.0.1:8003;
        keepalive 32;
    }
    
    # =============================================================================
    # SERVER BLOCKS
    # =============================================================================
    
    # Default server block
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Security: deny all requests
        return 444;
    }
    
    # Main application server
    server {
        listen 80;
        listen [::]:80;
        server_name example.com www.example.com;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    # HTTPS server block
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name example.com www.example.com;
        
        # =============================================================================
        # SSL CONFIGURATION
        # =============================================================================
        
        # SSL certificate files
        ssl_certificate /etc/ssl/certs/example.com.crt;
        ssl_certificate_key /etc/ssl/private/example.com.key;
        
        # SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;
        
        # OCSP Stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/ssl/certs/example.com-chain.crt;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;
        
        # =============================================================================
        # SECURITY HEADERS
        # =============================================================================
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        # =============================================================================
        # ROOT DIRECTORY
        # =============================================================================
        
        root /var/www/html;
        index index.html index.htm index.php;
        
        # =============================================================================
        # LOCATION BLOCKS
        # =============================================================================
        
        # Main application
        location / {
            try_files $uri $uri/ /index.php?$query_string;
            
            # Rate limiting
            limit_req zone=general burst=20 nodelay;
            
            # Security
            add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive, notranslate, noimageindex" always;
        }
        
        # API endpoints
        location /api/ {
            proxy_pass http://app_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Rate limiting for API
            limit_req zone=api burst=50 nodelay;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Login endpoint
        location /login {
            proxy_pass http://app_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Strict rate limiting for login
            limit_req zone=login burst=5 nodelay;
        }
        
        # Static files
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options "nosniff" always;
        }
        
        # PHP files
        location ~ \.php$ {
            fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
            
            # Security
            fastcgi_param HTTP_PROXY "";
        }
        
        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Deny access to backup files
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # =============================================================================
        # ERROR PAGES
        # =============================================================================
        
        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
        
        # =============================================================================
        # LOGGING
        # =============================================================================
        
        # Access logging
        access_log /var/log/nginx/example.com.access.log detailed;
        error_log /var/log/nginx/example.com.error.log warn;
    }
    
    # =============================================================================
    # ADDITIONAL SERVER BLOCKS
    # =============================================================================
    
    # Admin panel (restricted access)
    server {
        listen 443 ssl http2;
        server_name admin.example.com;
        
        # SSL configuration (same as main server)
        ssl_certificate /etc/ssl/certs/admin.example.com.crt;
        ssl_certificate_key /etc/ssl/private/admin.example.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers on;
        
        root /var/www/admin;
        index index.html index.php;
        
        # IP restriction
        allow 192.168.1.0/24;
        allow 10.0.0.0/8;
        deny all;
        
        location / {
            try_files $uri $uri/ /index.php?$query_string;
            
            # Additional security headers
            add_header X-Frame-Options "DENY" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
        }
        
        location ~ \.php$ {
            fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
        }
        
        access_log /var/log/nginx/admin.example.com.access.log;
        error_log /var/log/nginx/admin.example.com.error.log;
    }
    
    # API server (separate domain)
    server {
        listen 443 ssl http2;
        server_name api.example.com;
        
        # SSL configuration
        ssl_certificate /etc/ssl/certs/api.example.com.crt;
        ssl_certificate_key /etc/ssl/private/api.example.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers on;
        
        # API specific headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        
        location / {
            proxy_pass http://app_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Rate limiting
            limit_req zone=api burst=100 nodelay;
            
            # CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type "text/plain; charset=utf-8";
                add_header Content-Length 0;
                return 204;
            }
        }
        
        access_log /var/log/nginx/api.example.com.access.log;
        error_log /var/log/nginx/api.example.com.error.log;
    }
    
    # =============================================================================
    # MAINTENANCE MODE
    # =============================================================================
    
    # Maintenance mode server block
    server {
        listen 80;
        listen 443 ssl http2;
        server_name maintenance.example.com;
        
        # SSL configuration
        ssl_certificate /etc/ssl/certs/maintenance.example.com.crt;
        ssl_certificate_key /etc/ssl/private/maintenance.example.com.key;
        
        root /var/www/maintenance;
        index index.html;
        
        location / {
            try_files $uri $uri/ =404;
        }
        
        # Allow access to maintenance team
        location /admin {
            allow 192.168.1.0/24;
            deny all;
        }
    }
}

# =============================================================================
# STREAM CONTEXT (FOR TCP/UDP PROXYING)
# =============================================================================

stream {
    # Upstream servers for TCP proxying
    upstream backend {
        hash $remote_addr consistent;
        server 127.0.0.1:8001;
        server 127.0.0.1:8002;
        server 127.0.0.1:8003;
    }
    
    # TCP proxy for database
    server {
        listen 3306;
        proxy_pass backend;
        proxy_timeout 1s;
        proxy_responses 1;
        error_log /var/log/nginx/tcp_proxy_error.log;
    }
}

# =============================================================================
# CONFIGURATION NOTES
# =============================================================================

# After making changes to this configuration:
# 1. Test the configuration: nginx -t
# 2. Reload the configuration: nginx -s reload
# 3. Monitor logs: tail -f /var/log/nginx/error.log
# 4. Test SSL configuration: nginx -t

# Security recommendations:
# - Use strong SSL/TLS configuration
# - Implement rate limiting
# - Use security headers
# - Regular security audits
# - Keep nginx updated
# - Monitor access logs
# - Use fail2ban for additional protection

# Performance recommendations:
# - Enable gzip compression
# - Use sendfile and tcp_nopush
# - Implement caching strategies
# - Monitor performance metrics
# - Use HTTP/2 when possible
# - Optimize worker processes

# =============================================================================
# MONITORING COMMANDS
# =============================================================================

# Check nginx status
# systemctl status nginx

# Test configuration
# nginx -t

# Reload configuration
# nginx -s reload

# Check nginx processes
# ps aux | grep nginx

# Monitor access logs
# tail -f /var/log/nginx/access.log

# Monitor error logs
# tail -f /var/log/nginx/error.log

# Check SSL certificate
# openssl s_client -connect example.com:443 -servername example.com

# =============================================================================
# BACKUP AND RESTORE
# =============================================================================

# Backup configuration
# cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup

# Restore configuration
# cp /etc/nginx/nginx.conf.backup /etc/nginx/nginx.conf

# Backup SSL certificates
# cp -r /etc/ssl/certs/ /backup/ssl/certs/
# cp -r /etc/ssl/private/ /backup/ssl/private/ 